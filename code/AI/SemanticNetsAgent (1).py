# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GNpu7S_z0Z8u3punjRRhInO5OL9UabF9
"""

from collections import deque

class State:
    def __init__(self, sheep_left, wolves_left, boat_pos, moves=[]):
        self.sheep_left = sheep_left
        self.wolves_left = wolves_left
        self.boat_pos = boat_pos  # 0 for left, 1 for right
        self.moves = moves

    def is_goal(self):
        return self.sheep_left == 0 and self.wolves_left == 0 and self.boat_pos == 1

    def is_valid(self, initialSheep, initialWolves):
        sheep_right = initialSheep - self.sheep_left
        wolves_right = initialWolves - self.wolves_left
        if not (0 <= self.sheep_left <= initialSheep and 0 <= self.wolves_left <= initialWolves):
            return False
        if self.sheep_left < self.wolves_left and self.sheep_left > 0:
            return False
        if sheep_right < wolves_right and sheep_right > 0:
            return False
        return True

    def generate_successors(self, initialSheep, initialWolves):
        moves = [(1, 0), (0, 1), (1, 1), (2, 0), (0, 2)]
        successors = []
        for move_sheep, move_wolves in moves:
            new_sheep = self.sheep_left - move_sheep if self.boat_pos == 0 else self.sheep_left + move_sheep
            new_wolves = self.wolves_left - move_wolves if self.boat_pos == 0 else self.wolves_left + move_wolves
            new_boat_pos = 1 - self.boat_pos
            new_state = State(new_sheep, new_wolves, new_boat_pos, self.moves + [(move_sheep, move_wolves)])
            if new_state.is_valid(initialSheep, initialWolves):
                successors.append(new_state)
        return successors

class SemanticNetsAgent:
    def solve(self, initialSheep, initialWolves):
        initial_state = State(initialSheep, initialWolves, 0)
        if initial_state.is_goal():
            return []
        queue = deque([initial_state])
        visited = set((initialSheep, initialWolves, 0))

        while queue:
            current_state = queue.popleft()
            if current_state.is_goal():
                return [move for move in current_state.moves if move != (0, 0)]

            for successor in current_state.generate_successors(initialSheep, initialWolves):
                state_key = (successor.sheep_left, successor.wolves_left, successor.boat_pos)
                if state_key not in visited:
                    visited.add(state_key)
                    queue.append(successor)

        return []