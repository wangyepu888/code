import tensorflow as tf                 
from tensorflow.keras import layers
import numpy as np

from keras.models import Sequential
from keras.layers.core import Dense, Activation, Dropout
from keras.utils import np_utils


#import data from minst
(X_train,y_train),(X_test,y_test) = tf.keras.datasets.mnist.load_data()
#print(X_train_image.shape)
X_train = X_train.reshape(len(X_train), -1)
X_test = X_test.reshape(len(X_test), -1)


X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train = X_train/255 
X_test=X_test/255


y_train = np_utils.to_categorical(y_train, 10)
y_test = np_utils.to_categorical(y_test, 10)
print(y_train.shape)
print(y_test.shape)



print(y_train)

model = Sequential()

model.add(Dense(784, input_shape=(784,), kernel_initializer='he_normal'))
model.add(Activation('relu'))
model.add(Dropout(0.2)) 

model.add(Dense(286, kernel_initializer='he_normal'))
model.add(Activation('relu'))
model.add(Dropout(0.2)) 

model.add(Dense(10))
model.add(Activation('softmax'))


learning_rate=0.001
model.compile(optimizer=tf.keras.optimizers.Adam(lr=learning_rate), loss='categorical_crossentropy', metrics=['accuracy'])
model.fit(X_train, y_train, epochs=10, batch_size=64, verbose=1, validation_split=0.05)

train=model.evaluate(X_train,y_train)
print('training accuracy=',train[1])
test = model.evaluate(X_test,y_test) 
print('testing accuracy=',test[1]) 































